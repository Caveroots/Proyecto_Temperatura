
nodo_atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000079a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000746  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001124  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000659  00000000  00000000  00002207  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a6  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000089e  00000000  00000000  00002e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000036fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
  88:	0c 94 a1 03 	jmp	0x742	; 0x742 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Init>:
	csn(1);
	return status;
}
void ce(uint8_t estado)
{
	PORTB = (estado<<PORTB1);
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  a4:	8e e0       	ldi	r24, 0x0E	; 14
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  aa:	08 95       	ret

000000ac <USART_Transmit>:
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	95 ff       	sbrs	r25, 5
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <USART_Transmit+0x4>
  b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ba:	08 95       	ret

000000bc <SPI_MasterInit>:
  bc:	8e e2       	ldi	r24, 0x2E	; 46
  be:	84 b9       	out	0x04, r24	; 4
  c0:	81 e5       	ldi	r24, 0x51	; 81
  c2:	8c bd       	out	0x2c, r24	; 44
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	15 b8       	out	0x05, r1	; 5
  ca:	08 95       	ret

000000cc <SPI_MasterTransmit>:
  cc:	8e bd       	out	0x2e, r24	; 46
  ce:	0d b4       	in	r0, 0x2d	; 45
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <SPI_MasterTransmit+0x2>
  d4:	8e b5       	in	r24, 0x2e	; 46
  d6:	08 95       	ret

000000d8 <RF_Write>:
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	d6 2f       	mov	r29, r22
  de:	15 b8       	out	0x05, r1	; 5
  e0:	8f 71       	andi	r24, 0x1F	; 31
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
  e8:	c8 2f       	mov	r28, r24
  ea:	8d 2f       	mov	r24, r29
  ec:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	8c 2f       	mov	r24, r28
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <standby_mode>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	81 ee       	ldi	r24, 0xE1	; 225
 100:	94 e0       	ldi	r25, 0x04	; 4
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <standby_mode+0x6>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <standby_mode+0x10>
 10c:	00 00       	nop
}
void standby_mode()
{
	_delay_ms(200);
	RF_Write(0x01,0x00); //disable acknowledge
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 6c 00 	call	0xd8	; 0xd8 <RF_Write>
	RF_Write(0x02,0x3F); //enable data pipes
 116:	6f e3       	ldi	r22, 0x3F	; 63
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 6c 00 	call	0xd8	; 0xd8 <RF_Write>
	RF_Write(0x00,0x02); //enable PWR_UP bit
 11e:	62 e0       	ldi	r22, 0x02	; 2
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 6c 00 	call	0xd8	; 0xd8 <RF_Write>
}

/*FUNCIONES PARA NRF24L01 */
void csn(uint8_t estado)
{
	PORTB = (estado<<PORTB2);
 126:	15 b8       	out	0x05, r1	; 5
	_delay_ms(200);
	RF_Write(0x01,0x00); //disable acknowledge
	RF_Write(0x02,0x3F); //enable data pipes
	RF_Write(0x00,0x02); //enable PWR_UP bit
	csn(0);
	SPI_MasterTransmit(0x30);
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
	SPI_MasterTransmit(0xAA); //LSBYTE
 12e:	8a ea       	ldi	r24, 0xAA	; 170
 130:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
	SPI_MasterTransmit(0xC2);
 134:	82 ec       	ldi	r24, 0xC2	; 194
 136:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
	SPI_MasterTransmit(0xC2);
 13a:	82 ec       	ldi	r24, 0xC2	; 194
 13c:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
	SPI_MasterTransmit(0xC2);
 140:	82 ec       	ldi	r24, 0xC2	; 194
 142:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
	SPI_MasterTransmit(0xC2);
 146:	82 ec       	ldi	r24, 0xC2	; 194
 148:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
}

/*FUNCIONES PARA NRF24L01 */
void csn(uint8_t estado)
{
	PORTB = (estado<<PORTB2);
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	85 b9       	out	0x05, r24	; 5
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	9f e0       	ldi	r25, 0x0F	; 15
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <standby_mode+0x58>
 158:	00 c0       	rjmp	.+0      	; 0x15a <standby_mode+0x5e>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <tx_mode>:
	SPI_MasterTransmit(0xC2);
	csn(1);
	_delay_ms(2);
}
void tx_mode(uint8_t msg1, uint8_t msg2)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	d8 2f       	mov	r29, r24
 164:	c6 2f       	mov	r28, r22
	RF_Write(0x00,0x02);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 6c 00 	call	0xd8	; 0xd8 <RF_Write>
}

/*FUNCIONES PARA NRF24L01 */
void csn(uint8_t estado)
{
	PORTB = (estado<<PORTB2);
 16e:	15 b8       	out	0x05, r1	; 5
}
void tx_mode(uint8_t msg1, uint8_t msg2)
{
	RF_Write(0x00,0x02);
	csn(0);
	SPI_MasterTransmit(0xB0);
 170:	80 eb       	ldi	r24, 0xB0	; 176
 172:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
	SPI_MasterTransmit(msg1);
 176:	8d 2f       	mov	r24, r29
 178:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
	SPI_MasterTransmit(msg2);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterTransmit>
}

/*FUNCIONES PARA NRF24L01 */
void csn(uint8_t estado)
{
	PORTB = (estado<<PORTB2);
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	85 b9       	out	0x05, r24	; 5
	csn(1);
	return status;
}
void ce(uint8_t estado)
{
	PORTB = (estado<<PORTB1);
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	85 e8       	ldi	r24, 0x85	; 133
 18c:	8a 95       	dec	r24
 18e:	f1 f7       	brne	.-4      	; 0x18c <tx_mode+0x2e>
 190:	00 00       	nop
 192:	15 b8       	out	0x05, r1	; 5
 194:	8b e2       	ldi	r24, 0x2B	; 43
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <tx_mode+0x3a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <tx_mode+0x40>
 19e:	00 00       	nop
	csn(1);
	ce(1);
	_delay_us(50);
	ce(0);
	_delay_us(150);
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <onewire_reset>:
/* One-Wire */
uint8_t	onewire_reset(void)
{
	uint8_t retval, retries;
	PORTD &= ~(1<<PD7); // low
 1a6:	5f 98       	cbi	0x0b, 7	; 11
	DDRD &= ~(1<<PD7);  // input
 1a8:	57 98       	cbi	0x0a, 7	; 10
	retries = 128;
	while (!(PIND & (1<<PD7))) { // read
 1aa:	4f 9b       	sbis	0x09, 7	; 9
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <onewire_reset+0x10>
 1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <onewire_reset+0x1e>
 1b0:	81 50       	subi	r24, 0x01	; 1
		if (--retries == 0) {
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <onewire_reset+0x12>
 1b4:	1b c0       	rjmp	.+54     	; 0x1ec <onewire_reset+0x46>
{
	uint8_t retval, retries;
	PORTD &= ~(1<<PD7); // low
	DDRD &= ~(1<<PD7);  // input
	retries = 128;
	while (!(PIND & (1<<PD7))) { // read
 1b6:	8f e7       	ldi	r24, 0x7F	; 127
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	9a 95       	dec	r25
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <onewire_reset+0x14>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <onewire_reset+0x1a>
 1c0:	4f 9b       	sbis	0x09, 7	; 9
 1c2:	f6 cf       	rjmp	.-20     	; 0x1b0 <onewire_reset+0xa>
		if (--retries == 0) {
			return (2);
		}
		_delay_us(1);
	}
	DDRD |=(1<<PD7);// output
 1c4:	57 9a       	sbi	0x0a, 7	; 10
 1c6:	ef eb       	ldi	r30, 0xBF	; 191
 1c8:	f3 e0       	ldi	r31, 0x03	; 3
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <onewire_reset+0x24>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <onewire_reset+0x2a>
 1d0:	00 00       	nop
	_delay_us(480);
	DDRD &= ~(1<<PD7); // input
 1d2:	57 98       	cbi	0x0a, 7	; 10
 1d4:	f0 eb       	ldi	r31, 0xB0	; 176
 1d6:	fa 95       	dec	r31
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <onewire_reset+0x30>
	_delay_us(66);
	retval = PIND & (1<<PD7);// read
 1da:	89 b1       	in	r24, 0x09	; 9
 1dc:	80 78       	andi	r24, 0x80	; 128
 1de:	eb e3       	ldi	r30, 0x3B	; 59
 1e0:	f3 e0       	ldi	r31, 0x03	; 3
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <onewire_reset+0x3c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <onewire_reset+0x42>
 1e8:	00 00       	nop
	_delay_us(414);
	return retval;
 1ea:	08 95       	ret
	PORTD &= ~(1<<PD7); // low
	DDRD &= ~(1<<PD7);  // input
	retries = 128;
	while (!(PIND & (1<<PD7))) { // read
		if (--retries == 0) {
			return (2);
 1ec:	82 e0       	ldi	r24, 0x02	; 2
	DDRD &= ~(1<<PD7); // input
	_delay_us(66);
	retval = PIND & (1<<PD7);// read
	_delay_us(414);
	return retval;
}
 1ee:	08 95       	ret

000001f0 <onewire_write>:
	SREG = sreg;

	return value;
}
uint8_t onewire_write(uint8_t value)
{
 1f0:	98 e0       	ldi	r25, 0x08	; 8
	return retval;
}
static uint8_t onewire_bit(uint8_t value)
{
	uint8_t sreg;
	sreg = SREG;
 1f2:	3f b7       	in	r19, 0x3f	; 63
	cli();
 1f4:	f8 94       	cli
	DDRD |=(1<<PD7); // output
 1f6:	57 9a       	sbi	0x0a, 7	; 10
 1f8:	22 e0       	ldi	r18, 0x02	; 2
 1fa:	2a 95       	dec	r18
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <onewire_write+0xa>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <onewire_write+0x10>
	_delay_us(1);
	if (value) {
 200:	80 fd       	sbrc	r24, 0
		DDRD &= ~(1<<PD7); // input
 202:	57 98       	cbi	0x0a, 7	; 10
 204:	45 e2       	ldi	r20, 0x25	; 37
 206:	4a 95       	dec	r20
 208:	f1 f7       	brne	.-4      	; 0x206 <onewire_write+0x16>
 20a:	00 00       	nop
	}
	_delay_us(14);
	value = !((PIND &(1<<PD7)) == 0); // read
 20c:	29 b1       	in	r18, 0x09	; 9
 20e:	48 e7       	ldi	r20, 0x78	; 120
 210:	4a 95       	dec	r20
 212:	f1 f7       	brne	.-4      	; 0x210 <onewire_write+0x20>
	_delay_us(45);
	DDRD &= ~(1<<PD7); // input
 214:	57 98       	cbi	0x0a, 7	; 10
	SREG = sreg;
 216:	3f bf       	out	0x3f, r19	; 63
uint8_t onewire_write(uint8_t value)
{
	uint8_t i, r;
	for (i = 0; i < 8; ++i) {
		r = onewire_bit(value & 0x01);
		value >>= 1;
 218:	86 95       	lsr	r24
		if (r) {
 21a:	22 23       	and	r18, r18
 21c:	0c f4       	brge	.+2      	; 0x220 <onewire_write+0x30>
			value |= 0x80;
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	91 50       	subi	r25, 0x01	; 1
	return value;
}
uint8_t onewire_write(uint8_t value)
{
	uint8_t i, r;
	for (i = 0; i < 8; ++i) {
 222:	39 f7       	brne	.-50     	; 0x1f2 <onewire_write+0x2>
		if (r) {
			value |= 0x80;
		}
	}
	return value;
}
 224:	08 95       	ret

00000226 <onewire_read>:
uint8_t onewire_read(void)
{
	return onewire_write(0xFF);
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <onewire_write>
}
 22c:	08 95       	ret

0000022e <sensor_read>:

/* Sensor */
uint16_t sensor_read(void){
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
	uint16_t  t;
	onewire_reset();
 232:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <onewire_reset>
	onewire_write(0xCC); // skip rom
 236:	8c ec       	ldi	r24, 0xCC	; 204
 238:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <onewire_write>
	onewire_write(0x44); // convert Temperature
 23c:	84 e4       	ldi	r24, 0x44	; 68
 23e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <onewire_write>
	onewire_reset();
 242:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <onewire_reset>
	onewire_write(0xCC); // skip rom
 246:	8c ec       	ldi	r24, 0xCC	; 204
 248:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <onewire_write>
	onewire_write(0xBE); // read sensor
 24c:	8e eb       	ldi	r24, 0xBE	; 190
 24e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <onewire_write>
	t = onewire_read();
 252:	0e 94 13 01 	call	0x226	; 0x226 <onewire_read>
 256:	c8 2f       	mov	r28, r24
 258:	d0 e0       	ldi	r29, 0x00	; 0
	t |= (uint16_t)onewire_read() << 8;
 25a:	0e 94 13 01 	call	0x226	; 0x226 <onewire_read>
 25e:	9e 01       	movw	r18, r28
 260:	38 2b       	or	r19, r24
	return ((t >> 4) * 100 + ((t << 12) / 6553) * 10);
 262:	92 2f       	mov	r25, r18
 264:	92 95       	swap	r25
 266:	90 7f       	andi	r25, 0xF0	; 240
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	69 e9       	ldi	r22, 0x99	; 153
 26c:	79 e1       	ldi	r23, 0x19	; 25
 26e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__udivmodhi4>
 272:	cb 01       	movw	r24, r22
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	68 0f       	add	r22, r24
 286:	79 1f       	adc	r23, r25
 288:	32 95       	swap	r19
 28a:	22 95       	swap	r18
 28c:	2f 70       	andi	r18, 0x0F	; 15
 28e:	23 27       	eor	r18, r19
 290:	3f 70       	andi	r19, 0x0F	; 15
 292:	23 27       	eor	r18, r19
 294:	44 e6       	ldi	r20, 0x64	; 100
 296:	42 9f       	mul	r20, r18
 298:	c0 01       	movw	r24, r0
 29a:	43 9f       	mul	r20, r19
 29c:	90 0d       	add	r25, r0
 29e:	11 24       	eor	r1, r1
}
 2a0:	86 0f       	add	r24, r22
 2a2:	97 1f       	adc	r25, r23
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <enviar_data>:

void enviar_data(uint16_t t){
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	ac 01       	movw	r20, r24
	uint8_t n=t/100;
 2b8:	9c 01       	movw	r18, r24
 2ba:	36 95       	lsr	r19
 2bc:	27 95       	ror	r18
 2be:	36 95       	lsr	r19
 2c0:	27 95       	ror	r18
 2c2:	ab e7       	ldi	r26, 0x7B	; 123
 2c4:	b4 e1       	ldi	r27, 0x14	; 20
 2c6:	0e 94 92 03 	call	0x724	; 0x724 <__umulhisi3>
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	c8 2f       	mov	r28, r24
	uint8_t d = t-n;
 2d0:	d4 2f       	mov	r29, r20
 2d2:	d8 1b       	sub	r29, r24
	if(d>199){
 2d4:	d8 3c       	cpi	r29, 0xC8	; 200
 2d6:	00 f1       	brcs	.+64     	; 0x318 <enviar_data+0x6e>
		n = n+ (d*0.01);
 2d8:	bc 01       	movw	r22, r24
 2da:	77 27       	eor	r23, r23
 2dc:	07 2e       	mov	r0, r23
 2de:	00 0c       	add	r0, r0
 2e0:	88 0b       	sbc	r24, r24
 2e2:	99 0b       	sbc	r25, r25
 2e4:	0e 94 85 02 	call	0x50a	; 0x50a <__floatsisf>
 2e8:	6b 01       	movw	r12, r22
 2ea:	7c 01       	movw	r14, r24
 2ec:	6d 2f       	mov	r22, r29
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 85 02 	call	0x50a	; 0x50a <__floatsisf>
 2f8:	2a e0       	ldi	r18, 0x0A	; 10
 2fa:	37 ed       	ldi	r19, 0xD7	; 215
 2fc:	43 e2       	ldi	r20, 0x23	; 35
 2fe:	5c e3       	ldi	r21, 0x3C	; 60
 300:	0e 94 11 03 	call	0x622	; 0x622 <__mulsf3>
 304:	9b 01       	movw	r18, r22
 306:	ac 01       	movw	r20, r24
 308:	c7 01       	movw	r24, r14
 30a:	b6 01       	movw	r22, r12
 30c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__addsf3>
 310:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__fixunssfsi>
 314:	c6 2f       	mov	r28, r22
		n=n&0xFF;
		d=d-200;
 316:	d8 5c       	subi	r29, 0xC8	; 200
	};
	if  (d>99){
 318:	d4 36       	cpi	r29, 0x64	; 100
 31a:	f0 f0       	brcs	.+60     	; 0x358 <enviar_data+0xae>
		n = n+ (d*0.01);
 31c:	6d 2f       	mov	r22, r29
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 85 02 	call	0x50a	; 0x50a <__floatsisf>
 328:	2a e0       	ldi	r18, 0x0A	; 10
 32a:	37 ed       	ldi	r19, 0xD7	; 215
 32c:	43 e2       	ldi	r20, 0x23	; 35
 32e:	5c e3       	ldi	r21, 0x3C	; 60
 330:	0e 94 11 03 	call	0x622	; 0x622 <__mulsf3>
 334:	6b 01       	movw	r12, r22
 336:	7c 01       	movw	r14, r24
 338:	6c 2f       	mov	r22, r28
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 85 02 	call	0x50a	; 0x50a <__floatsisf>
 344:	9b 01       	movw	r18, r22
 346:	ac 01       	movw	r20, r24
 348:	c7 01       	movw	r24, r14
 34a:	b6 01       	movw	r22, r12
 34c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__addsf3>
 350:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__fixunssfsi>
 354:	c6 2f       	mov	r28, r22
		n=n&0xFF;
		d= d-100;
 356:	d4 56       	subi	r29, 0x64	; 100
	};

	tx_mode(d,n);
 358:	6c 2f       	mov	r22, r28
 35a:	8d 2f       	mov	r24, r29
 35c:	0e 94 af 00 	call	0x15e	; 0x15e <tx_mode>
	USART_Transmit(n);
 360:	8c 2f       	mov	r24, r28
 362:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
	USART_Transmit(d);
 366:	8d 2f       	mov	r24, r29
 368:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	df 90       	pop	r13
 376:	cf 90       	pop	r12
 378:	08 95       	ret

0000037a <main>:
int main(void)
{
	USART_Init(MYUBRR);
 37a:	87 e6       	ldi	r24, 0x67	; 103
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
	SPI_MasterInit();
 382:	0e 94 5e 00 	call	0xbc	; 0xbc <SPI_MasterInit>
	standby_mode();
 386:	0e 94 7e 00 	call	0xfc	; 0xfc <standby_mode>
	uint16_t t;
	uint16_t test_t;
	test_t = sensor_read();
 38a:	0e 94 17 01 	call	0x22e	; 0x22e <sensor_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	3e e9       	ldi	r19, 0x9E	; 158
 392:	44 e2       	ldi	r20, 0x24	; 36
 394:	21 50       	subi	r18, 0x01	; 1
 396:	30 40       	sbci	r19, 0x00	; 0
 398:	40 40       	sbci	r20, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x1a>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x24>
 39e:	00 00       	nop
	_delay_ms(1500);
	while (1)
	{
		t= sensor_read();
 3a0:	0e 94 17 01 	call	0x22e	; 0x22e <sensor_read>
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	36 e1       	ldi	r19, 0x16	; 22
 3a8:	41 e1       	ldi	r20, 0x11	; 17
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	30 40       	sbci	r19, 0x00	; 0
 3ae:	40 40       	sbci	r20, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x30>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x3a>
 3b4:	00 00       	nop
		_delay_ms(700);
		enviar_data(t);
 3b6:	0e 94 55 01 	call	0x2aa	; 0x2aa <enviar_data>
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	93 ed       	ldi	r25, 0xD3	; 211
 3be:	20 e3       	ldi	r18, 0x30	; 48
 3c0:	81 50       	subi	r24, 0x01	; 1
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	20 40       	sbci	r18, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x46>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x50>
 3ca:	00 00       	nop
 3cc:	e9 cf       	rjmp	.-46     	; 0x3a0 <main+0x26>

000003ce <__subsf3>:
 3ce:	50 58       	subi	r21, 0x80	; 128

000003d0 <__addsf3>:
 3d0:	bb 27       	eor	r27, r27
 3d2:	aa 27       	eor	r26, r26
 3d4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__addsf3x>
 3d8:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_round>
 3dc:	0e 94 c9 02 	call	0x592	; 0x592 <__fp_pscA>
 3e0:	38 f0       	brcs	.+14     	; 0x3f0 <__addsf3+0x20>
 3e2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__fp_pscB>
 3e6:	20 f0       	brcs	.+8      	; 0x3f0 <__addsf3+0x20>
 3e8:	39 f4       	brne	.+14     	; 0x3f8 <__addsf3+0x28>
 3ea:	9f 3f       	cpi	r25, 0xFF	; 255
 3ec:	19 f4       	brne	.+6      	; 0x3f4 <__addsf3+0x24>
 3ee:	26 f4       	brtc	.+8      	; 0x3f8 <__addsf3+0x28>
 3f0:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__fp_nan>
 3f4:	0e f4       	brtc	.+2      	; 0x3f8 <__addsf3+0x28>
 3f6:	e0 95       	com	r30
 3f8:	e7 fb       	bst	r30, 7
 3fa:	0c 94 c0 02 	jmp	0x580	; 0x580 <__fp_inf>

000003fe <__addsf3x>:
 3fe:	e9 2f       	mov	r30, r25
 400:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_split3>
 404:	58 f3       	brcs	.-42     	; 0x3dc <__addsf3+0xc>
 406:	ba 17       	cp	r27, r26
 408:	62 07       	cpc	r22, r18
 40a:	73 07       	cpc	r23, r19
 40c:	84 07       	cpc	r24, r20
 40e:	95 07       	cpc	r25, r21
 410:	20 f0       	brcs	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 412:	79 f4       	brne	.+30     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 414:	a6 f5       	brtc	.+104    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 416:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_zero>
 41a:	0e f4       	brtc	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	e0 95       	com	r30
 41e:	0b 2e       	mov	r0, r27
 420:	ba 2f       	mov	r27, r26
 422:	a0 2d       	mov	r26, r0
 424:	0b 01       	movw	r0, r22
 426:	b9 01       	movw	r22, r18
 428:	90 01       	movw	r18, r0
 42a:	0c 01       	movw	r0, r24
 42c:	ca 01       	movw	r24, r20
 42e:	a0 01       	movw	r20, r0
 430:	11 24       	eor	r1, r1
 432:	ff 27       	eor	r31, r31
 434:	59 1b       	sub	r21, r25
 436:	99 f0       	breq	.+38     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 438:	59 3f       	cpi	r21, 0xF9	; 249
 43a:	50 f4       	brcc	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 43c:	50 3e       	cpi	r21, 0xE0	; 224
 43e:	68 f1       	brcs	.+90     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 440:	1a 16       	cp	r1, r26
 442:	f0 40       	sbci	r31, 0x00	; 0
 444:	a2 2f       	mov	r26, r18
 446:	23 2f       	mov	r18, r19
 448:	34 2f       	mov	r19, r20
 44a:	44 27       	eor	r20, r20
 44c:	58 5f       	subi	r21, 0xF8	; 248
 44e:	f3 cf       	rjmp	.-26     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 450:	46 95       	lsr	r20
 452:	37 95       	ror	r19
 454:	27 95       	ror	r18
 456:	a7 95       	ror	r26
 458:	f0 40       	sbci	r31, 0x00	; 0
 45a:	53 95       	inc	r21
 45c:	c9 f7       	brne	.-14     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 45e:	7e f4       	brtc	.+30     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 460:	1f 16       	cp	r1, r31
 462:	ba 0b       	sbc	r27, r26
 464:	62 0b       	sbc	r22, r18
 466:	73 0b       	sbc	r23, r19
 468:	84 0b       	sbc	r24, r20
 46a:	ba f0       	brmi	.+46     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 46c:	91 50       	subi	r25, 0x01	; 1
 46e:	a1 f0       	breq	.+40     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 470:	ff 0f       	add	r31, r31
 472:	bb 1f       	adc	r27, r27
 474:	66 1f       	adc	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	c2 f7       	brpl	.-16     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 47c:	0e c0       	rjmp	.+28     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 47e:	ba 0f       	add	r27, r26
 480:	62 1f       	adc	r22, r18
 482:	73 1f       	adc	r23, r19
 484:	84 1f       	adc	r24, r20
 486:	48 f4       	brcc	.+18     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 488:	87 95       	ror	r24
 48a:	77 95       	ror	r23
 48c:	67 95       	ror	r22
 48e:	b7 95       	ror	r27
 490:	f7 95       	ror	r31
 492:	9e 3f       	cpi	r25, 0xFE	; 254
 494:	08 f0       	brcs	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 496:	b0 cf       	rjmp	.-160    	; 0x3f8 <__addsf3+0x28>
 498:	93 95       	inc	r25
 49a:	88 0f       	add	r24, r24
 49c:	08 f0       	brcs	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49e:	99 27       	eor	r25, r25
 4a0:	ee 0f       	add	r30, r30
 4a2:	97 95       	ror	r25
 4a4:	87 95       	ror	r24
 4a6:	08 95       	ret

000004a8 <__fixunssfsi>:
 4a8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__fp_splitA>
 4ac:	88 f0       	brcs	.+34     	; 0x4d0 <__fixunssfsi+0x28>
 4ae:	9f 57       	subi	r25, 0x7F	; 127
 4b0:	98 f0       	brcs	.+38     	; 0x4d8 <__fixunssfsi+0x30>
 4b2:	b9 2f       	mov	r27, r25
 4b4:	99 27       	eor	r25, r25
 4b6:	b7 51       	subi	r27, 0x17	; 23
 4b8:	b0 f0       	brcs	.+44     	; 0x4e6 <__fixunssfsi+0x3e>
 4ba:	e1 f0       	breq	.+56     	; 0x4f4 <__fixunssfsi+0x4c>
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	88 1f       	adc	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	1a f0       	brmi	.+6      	; 0x4cc <__fixunssfsi+0x24>
 4c6:	ba 95       	dec	r27
 4c8:	c9 f7       	brne	.-14     	; 0x4bc <__fixunssfsi+0x14>
 4ca:	14 c0       	rjmp	.+40     	; 0x4f4 <__fixunssfsi+0x4c>
 4cc:	b1 30       	cpi	r27, 0x01	; 1
 4ce:	91 f0       	breq	.+36     	; 0x4f4 <__fixunssfsi+0x4c>
 4d0:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_zero>
 4d4:	b1 e0       	ldi	r27, 0x01	; 1
 4d6:	08 95       	ret
 4d8:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_zero>
 4dc:	67 2f       	mov	r22, r23
 4de:	78 2f       	mov	r23, r24
 4e0:	88 27       	eor	r24, r24
 4e2:	b8 5f       	subi	r27, 0xF8	; 248
 4e4:	39 f0       	breq	.+14     	; 0x4f4 <__fixunssfsi+0x4c>
 4e6:	b9 3f       	cpi	r27, 0xF9	; 249
 4e8:	cc f3       	brlt	.-14     	; 0x4dc <__fixunssfsi+0x34>
 4ea:	86 95       	lsr	r24
 4ec:	77 95       	ror	r23
 4ee:	67 95       	ror	r22
 4f0:	b3 95       	inc	r27
 4f2:	d9 f7       	brne	.-10     	; 0x4ea <__fixunssfsi+0x42>
 4f4:	3e f4       	brtc	.+14     	; 0x504 <__fixunssfsi+0x5c>
 4f6:	90 95       	com	r25
 4f8:	80 95       	com	r24
 4fa:	70 95       	com	r23
 4fc:	61 95       	neg	r22
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	8f 4f       	sbci	r24, 0xFF	; 255
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	08 95       	ret

00000506 <__floatunsisf>:
 506:	e8 94       	clt
 508:	09 c0       	rjmp	.+18     	; 0x51c <__floatsisf+0x12>

0000050a <__floatsisf>:
 50a:	97 fb       	bst	r25, 7
 50c:	3e f4       	brtc	.+14     	; 0x51c <__floatsisf+0x12>
 50e:	90 95       	com	r25
 510:	80 95       	com	r24
 512:	70 95       	com	r23
 514:	61 95       	neg	r22
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	8f 4f       	sbci	r24, 0xFF	; 255
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	99 23       	and	r25, r25
 51e:	a9 f0       	breq	.+42     	; 0x54a <__floatsisf+0x40>
 520:	f9 2f       	mov	r31, r25
 522:	96 e9       	ldi	r25, 0x96	; 150
 524:	bb 27       	eor	r27, r27
 526:	93 95       	inc	r25
 528:	f6 95       	lsr	r31
 52a:	87 95       	ror	r24
 52c:	77 95       	ror	r23
 52e:	67 95       	ror	r22
 530:	b7 95       	ror	r27
 532:	f1 11       	cpse	r31, r1
 534:	f8 cf       	rjmp	.-16     	; 0x526 <__floatsisf+0x1c>
 536:	fa f4       	brpl	.+62     	; 0x576 <__floatsisf+0x6c>
 538:	bb 0f       	add	r27, r27
 53a:	11 f4       	brne	.+4      	; 0x540 <__floatsisf+0x36>
 53c:	60 ff       	sbrs	r22, 0
 53e:	1b c0       	rjmp	.+54     	; 0x576 <__floatsisf+0x6c>
 540:	6f 5f       	subi	r22, 0xFF	; 255
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8f 4f       	sbci	r24, 0xFF	; 255
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	16 c0       	rjmp	.+44     	; 0x576 <__floatsisf+0x6c>
 54a:	88 23       	and	r24, r24
 54c:	11 f0       	breq	.+4      	; 0x552 <__floatsisf+0x48>
 54e:	96 e9       	ldi	r25, 0x96	; 150
 550:	11 c0       	rjmp	.+34     	; 0x574 <__floatsisf+0x6a>
 552:	77 23       	and	r23, r23
 554:	21 f0       	breq	.+8      	; 0x55e <__floatsisf+0x54>
 556:	9e e8       	ldi	r25, 0x8E	; 142
 558:	87 2f       	mov	r24, r23
 55a:	76 2f       	mov	r23, r22
 55c:	05 c0       	rjmp	.+10     	; 0x568 <__floatsisf+0x5e>
 55e:	66 23       	and	r22, r22
 560:	71 f0       	breq	.+28     	; 0x57e <__floatsisf+0x74>
 562:	96 e8       	ldi	r25, 0x86	; 134
 564:	86 2f       	mov	r24, r22
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	2a f0       	brmi	.+10     	; 0x576 <__floatsisf+0x6c>
 56c:	9a 95       	dec	r25
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	da f7       	brpl	.-10     	; 0x56c <__floatsisf+0x62>
 576:	88 0f       	add	r24, r24
 578:	96 95       	lsr	r25
 57a:	87 95       	ror	r24
 57c:	97 f9       	bld	r25, 7
 57e:	08 95       	ret

00000580 <__fp_inf>:
 580:	97 f9       	bld	r25, 7
 582:	9f 67       	ori	r25, 0x7F	; 127
 584:	80 e8       	ldi	r24, 0x80	; 128
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	08 95       	ret

0000058c <__fp_nan>:
 58c:	9f ef       	ldi	r25, 0xFF	; 255
 58e:	80 ec       	ldi	r24, 0xC0	; 192
 590:	08 95       	ret

00000592 <__fp_pscA>:
 592:	00 24       	eor	r0, r0
 594:	0a 94       	dec	r0
 596:	16 16       	cp	r1, r22
 598:	17 06       	cpc	r1, r23
 59a:	18 06       	cpc	r1, r24
 59c:	09 06       	cpc	r0, r25
 59e:	08 95       	ret

000005a0 <__fp_pscB>:
 5a0:	00 24       	eor	r0, r0
 5a2:	0a 94       	dec	r0
 5a4:	12 16       	cp	r1, r18
 5a6:	13 06       	cpc	r1, r19
 5a8:	14 06       	cpc	r1, r20
 5aa:	05 06       	cpc	r0, r21
 5ac:	08 95       	ret

000005ae <__fp_round>:
 5ae:	09 2e       	mov	r0, r25
 5b0:	03 94       	inc	r0
 5b2:	00 0c       	add	r0, r0
 5b4:	11 f4       	brne	.+4      	; 0x5ba <__fp_round+0xc>
 5b6:	88 23       	and	r24, r24
 5b8:	52 f0       	brmi	.+20     	; 0x5ce <__fp_round+0x20>
 5ba:	bb 0f       	add	r27, r27
 5bc:	40 f4       	brcc	.+16     	; 0x5ce <__fp_round+0x20>
 5be:	bf 2b       	or	r27, r31
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <__fp_round+0x18>
 5c2:	60 ff       	sbrs	r22, 0
 5c4:	04 c0       	rjmp	.+8      	; 0x5ce <__fp_round+0x20>
 5c6:	6f 5f       	subi	r22, 0xFF	; 255
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	8f 4f       	sbci	r24, 0xFF	; 255
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	08 95       	ret

000005d0 <__fp_split3>:
 5d0:	57 fd       	sbrc	r21, 7
 5d2:	90 58       	subi	r25, 0x80	; 128
 5d4:	44 0f       	add	r20, r20
 5d6:	55 1f       	adc	r21, r21
 5d8:	59 f0       	breq	.+22     	; 0x5f0 <__fp_splitA+0x10>
 5da:	5f 3f       	cpi	r21, 0xFF	; 255
 5dc:	71 f0       	breq	.+28     	; 0x5fa <__fp_splitA+0x1a>
 5de:	47 95       	ror	r20

000005e0 <__fp_splitA>:
 5e0:	88 0f       	add	r24, r24
 5e2:	97 fb       	bst	r25, 7
 5e4:	99 1f       	adc	r25, r25
 5e6:	61 f0       	breq	.+24     	; 0x600 <__fp_splitA+0x20>
 5e8:	9f 3f       	cpi	r25, 0xFF	; 255
 5ea:	79 f0       	breq	.+30     	; 0x60a <__fp_splitA+0x2a>
 5ec:	87 95       	ror	r24
 5ee:	08 95       	ret
 5f0:	12 16       	cp	r1, r18
 5f2:	13 06       	cpc	r1, r19
 5f4:	14 06       	cpc	r1, r20
 5f6:	55 1f       	adc	r21, r21
 5f8:	f2 cf       	rjmp	.-28     	; 0x5de <__fp_split3+0xe>
 5fa:	46 95       	lsr	r20
 5fc:	f1 df       	rcall	.-30     	; 0x5e0 <__fp_splitA>
 5fe:	08 c0       	rjmp	.+16     	; 0x610 <__fp_splitA+0x30>
 600:	16 16       	cp	r1, r22
 602:	17 06       	cpc	r1, r23
 604:	18 06       	cpc	r1, r24
 606:	99 1f       	adc	r25, r25
 608:	f1 cf       	rjmp	.-30     	; 0x5ec <__fp_splitA+0xc>
 60a:	86 95       	lsr	r24
 60c:	71 05       	cpc	r23, r1
 60e:	61 05       	cpc	r22, r1
 610:	08 94       	sec
 612:	08 95       	ret

00000614 <__fp_zero>:
 614:	e8 94       	clt

00000616 <__fp_szero>:
 616:	bb 27       	eor	r27, r27
 618:	66 27       	eor	r22, r22
 61a:	77 27       	eor	r23, r23
 61c:	cb 01       	movw	r24, r22
 61e:	97 f9       	bld	r25, 7
 620:	08 95       	ret

00000622 <__mulsf3>:
 622:	0e 94 24 03 	call	0x648	; 0x648 <__mulsf3x>
 626:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_round>
 62a:	0e 94 c9 02 	call	0x592	; 0x592 <__fp_pscA>
 62e:	38 f0       	brcs	.+14     	; 0x63e <__mulsf3+0x1c>
 630:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__fp_pscB>
 634:	20 f0       	brcs	.+8      	; 0x63e <__mulsf3+0x1c>
 636:	95 23       	and	r25, r21
 638:	11 f0       	breq	.+4      	; 0x63e <__mulsf3+0x1c>
 63a:	0c 94 c0 02 	jmp	0x580	; 0x580 <__fp_inf>
 63e:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__fp_nan>
 642:	11 24       	eor	r1, r1
 644:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_szero>

00000648 <__mulsf3x>:
 648:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_split3>
 64c:	70 f3       	brcs	.-36     	; 0x62a <__mulsf3+0x8>

0000064e <__mulsf3_pse>:
 64e:	95 9f       	mul	r25, r21
 650:	c1 f3       	breq	.-16     	; 0x642 <__mulsf3+0x20>
 652:	95 0f       	add	r25, r21
 654:	50 e0       	ldi	r21, 0x00	; 0
 656:	55 1f       	adc	r21, r21
 658:	62 9f       	mul	r22, r18
 65a:	f0 01       	movw	r30, r0
 65c:	72 9f       	mul	r23, r18
 65e:	bb 27       	eor	r27, r27
 660:	f0 0d       	add	r31, r0
 662:	b1 1d       	adc	r27, r1
 664:	63 9f       	mul	r22, r19
 666:	aa 27       	eor	r26, r26
 668:	f0 0d       	add	r31, r0
 66a:	b1 1d       	adc	r27, r1
 66c:	aa 1f       	adc	r26, r26
 66e:	64 9f       	mul	r22, r20
 670:	66 27       	eor	r22, r22
 672:	b0 0d       	add	r27, r0
 674:	a1 1d       	adc	r26, r1
 676:	66 1f       	adc	r22, r22
 678:	82 9f       	mul	r24, r18
 67a:	22 27       	eor	r18, r18
 67c:	b0 0d       	add	r27, r0
 67e:	a1 1d       	adc	r26, r1
 680:	62 1f       	adc	r22, r18
 682:	73 9f       	mul	r23, r19
 684:	b0 0d       	add	r27, r0
 686:	a1 1d       	adc	r26, r1
 688:	62 1f       	adc	r22, r18
 68a:	83 9f       	mul	r24, r19
 68c:	a0 0d       	add	r26, r0
 68e:	61 1d       	adc	r22, r1
 690:	22 1f       	adc	r18, r18
 692:	74 9f       	mul	r23, r20
 694:	33 27       	eor	r19, r19
 696:	a0 0d       	add	r26, r0
 698:	61 1d       	adc	r22, r1
 69a:	23 1f       	adc	r18, r19
 69c:	84 9f       	mul	r24, r20
 69e:	60 0d       	add	r22, r0
 6a0:	21 1d       	adc	r18, r1
 6a2:	82 2f       	mov	r24, r18
 6a4:	76 2f       	mov	r23, r22
 6a6:	6a 2f       	mov	r22, r26
 6a8:	11 24       	eor	r1, r1
 6aa:	9f 57       	subi	r25, 0x7F	; 127
 6ac:	50 40       	sbci	r21, 0x00	; 0
 6ae:	9a f0       	brmi	.+38     	; 0x6d6 <__mulsf3_pse+0x88>
 6b0:	f1 f0       	breq	.+60     	; 0x6ee <__mulsf3_pse+0xa0>
 6b2:	88 23       	and	r24, r24
 6b4:	4a f0       	brmi	.+18     	; 0x6c8 <__mulsf3_pse+0x7a>
 6b6:	ee 0f       	add	r30, r30
 6b8:	ff 1f       	adc	r31, r31
 6ba:	bb 1f       	adc	r27, r27
 6bc:	66 1f       	adc	r22, r22
 6be:	77 1f       	adc	r23, r23
 6c0:	88 1f       	adc	r24, r24
 6c2:	91 50       	subi	r25, 0x01	; 1
 6c4:	50 40       	sbci	r21, 0x00	; 0
 6c6:	a9 f7       	brne	.-22     	; 0x6b2 <__mulsf3_pse+0x64>
 6c8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ca:	51 05       	cpc	r21, r1
 6cc:	80 f0       	brcs	.+32     	; 0x6ee <__mulsf3_pse+0xa0>
 6ce:	0c 94 c0 02 	jmp	0x580	; 0x580 <__fp_inf>
 6d2:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_szero>
 6d6:	5f 3f       	cpi	r21, 0xFF	; 255
 6d8:	e4 f3       	brlt	.-8      	; 0x6d2 <__mulsf3_pse+0x84>
 6da:	98 3e       	cpi	r25, 0xE8	; 232
 6dc:	d4 f3       	brlt	.-12     	; 0x6d2 <__mulsf3_pse+0x84>
 6de:	86 95       	lsr	r24
 6e0:	77 95       	ror	r23
 6e2:	67 95       	ror	r22
 6e4:	b7 95       	ror	r27
 6e6:	f7 95       	ror	r31
 6e8:	e7 95       	ror	r30
 6ea:	9f 5f       	subi	r25, 0xFF	; 255
 6ec:	c1 f7       	brne	.-16     	; 0x6de <__mulsf3_pse+0x90>
 6ee:	fe 2b       	or	r31, r30
 6f0:	88 0f       	add	r24, r24
 6f2:	91 1d       	adc	r25, r1
 6f4:	96 95       	lsr	r25
 6f6:	87 95       	ror	r24
 6f8:	97 f9       	bld	r25, 7
 6fa:	08 95       	ret

000006fc <__udivmodhi4>:
 6fc:	aa 1b       	sub	r26, r26
 6fe:	bb 1b       	sub	r27, r27
 700:	51 e1       	ldi	r21, 0x11	; 17
 702:	07 c0       	rjmp	.+14     	; 0x712 <__udivmodhi4_ep>

00000704 <__udivmodhi4_loop>:
 704:	aa 1f       	adc	r26, r26
 706:	bb 1f       	adc	r27, r27
 708:	a6 17       	cp	r26, r22
 70a:	b7 07       	cpc	r27, r23
 70c:	10 f0       	brcs	.+4      	; 0x712 <__udivmodhi4_ep>
 70e:	a6 1b       	sub	r26, r22
 710:	b7 0b       	sbc	r27, r23

00000712 <__udivmodhi4_ep>:
 712:	88 1f       	adc	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	5a 95       	dec	r21
 718:	a9 f7       	brne	.-22     	; 0x704 <__udivmodhi4_loop>
 71a:	80 95       	com	r24
 71c:	90 95       	com	r25
 71e:	bc 01       	movw	r22, r24
 720:	cd 01       	movw	r24, r26
 722:	08 95       	ret

00000724 <__umulhisi3>:
 724:	a2 9f       	mul	r26, r18
 726:	b0 01       	movw	r22, r0
 728:	b3 9f       	mul	r27, r19
 72a:	c0 01       	movw	r24, r0
 72c:	a3 9f       	mul	r26, r19
 72e:	70 0d       	add	r23, r0
 730:	81 1d       	adc	r24, r1
 732:	11 24       	eor	r1, r1
 734:	91 1d       	adc	r25, r1
 736:	b2 9f       	mul	r27, r18
 738:	70 0d       	add	r23, r0
 73a:	81 1d       	adc	r24, r1
 73c:	11 24       	eor	r1, r1
 73e:	91 1d       	adc	r25, r1
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
